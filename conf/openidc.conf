Include /etc/apache2/mods-available/auth_openidc.load
LoadModule rewrite_module modules/mod_rewrite.so
LoadModule proxy_module modules/mod_proxy.so
LoadModule proxy_http_module modules/mod_proxy_http.so

Listen 81

# To use mod_auth_openidc in a forwardauth server, the workaround below is used
# to send the forwarded URI to a virtual host to make it look like a "real" request
# is coming in, letting mod_auth_openidc do its redirect/allow/validation magic.
# Otherwise, on :80, the URI would be the URI of the forwardauth request.

<VirtualHost *:80>
    DocumentRoot /usr/local/apache2/htdocs

    <Location />
        RewriteEngine  on
        RewriteRule ^ http://localhost:81%{HTTP:X-Forwarded-Uri} [P,L]
        ProxyPassReverse http://localhost:81/
    </Location>
</VirtualHost>

# Listen on localhost only; this vhost should not be reachable from the outside
<VirtualHost localhost:81>
    DocumentRoot /usr/local/apache2/htdocs

    OIDCRedirectURI /modauthopenidc__redirect_uri
    # Make all claims available as request headers to mirror them further down
    OIDCPassClaimsAs both

    Include /conf/vhost.conf

    <Location />
        AuthType openid-connect
        Require valid-user

        Header set X-Forwarded-User "%{OIDC_CLAIM_${OIDC_REMOTE_USER_CLAIM}}e" env=OIDC_access_token
        # Mirror all OIDC headers to response headers
        Header echo ^OIDC env=OIDC_access_token

        RewriteEngine  on
        RewriteCond %{REQUEST_URI} !^/$
        RewriteCond %{REQUEST_URI} !^/index.html$
        RewriteCond %{REQUEST_URI} !^/modauthopenidc__redirect_uri
        RewriteRule ^ index.html [L]

        Include /conf/location.conf
    </Location>
</VirtualHost>
